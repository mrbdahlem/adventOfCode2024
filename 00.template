from types import SimpleNamespace
import helper
from datetime import datetime

from copy import copy, deepcopy
from collections import defaultdict
import re
from functools import cache
from PIL import Image, ImageDraw
import asyncio
import heapq

def parse(data):
    parsed = SimpleNamespace()
    parsed.data = data
    return parsed

################################

def part1(data):
    return 0

################################

def part2(data):
    return 0

################################

def run(data, stage):
    """
    Run both parts of the day
    """
    parsed = parse(data)
    print("------------------------")
    
    parsed.stage = stage
    
    # Solve the first part
    print("Part 1: {\033[0;41m\033[1;97m", part1(parsed), "\033[0m}")

    # Solve the second part
    print("Part 2: {\033[0;42m\033[1;97m", part2(parsed), "\033[0m}")

    print("-------------------------------------------")

################################

async def main():
    day = int(__file__.split("\\")[-1].split("/")[-1].split(".")[0])
    print ("Day", day)

    # load a sample data file for this day, if it exists
    if helper.exists(f"{day:02}-samp"):
        samp = helper.load_data(f"{day:02}-samp")
    else:
        samp = None

    # load the actual data for this day
    data = helper.load_data(day)

    if samp:
        print("--------------- Sample Data ---------------")
        run(samp, 'samp')

    print("-------------------------------------------")
    run(data, 'full')

asyncio.run(main())